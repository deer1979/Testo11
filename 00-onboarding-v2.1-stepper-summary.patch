*** Begin Patch
*** Update File: app/src/main/java/com/deercom/testo11/nav/NewRoutes.kt
@@
-package com.deercom.testo11.nav
+package com.deercom.testo11.nav
 
 enum class NewRoutes(val route: String) {
-    Onboarding("onboarding"),
+    StartRouter("start"),
+    Onboarding("onboarding"),
+    Summary("summary"),
     Login("login"),
     Home("home")
 }
*** End Patch
*** Begin Patch
*** Update File: app/src/main/java/com/deercom/testo11/nav/NewAppNavGraph.kt
@@
 package com.deercom.testo11.nav
 
 import androidx.compose.runtime.Composable
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
+import androidx.hilt.navigation.compose.hiltViewModel
+import kotlinx.coroutines.flow.first
+import androidx.compose.runtime.LaunchedEffect
+import com.deercom.testo11.ui.screens.onboarding.OnboardingScreen
+import com.deercom.testo11.ui.screens.onboarding.SummaryScreen
+import com.deercom.testo11.login.LoginUserPassScreen
+import com.deercom.testo11.ui.screens.home.HomeWithBottomBarScreen
+import com.deercom.testo11.users.UsersViewModel
+import com.deercom.testo11.onboarding.OnboardingViewModel
+import com.deercom.testo11.data.LocalUserRepository
 
 @Composable
 fun NewAppNavGraph() {
     val nav = rememberNavController()
-    NavHost(navController = nav, startDestination = NewRoutes.Onboarding.route) {
-        composable(NewRoutes.Onboarding.route) {
-            com.deercom.testo11.ui.screens.onboarding.OnboardingScreen(
-                onFinished = { nav.navigate(NewRoutes.Login.route) { popUpTo(0) } }
-            )
-        }
-        composable(NewRoutes.Login.route) {
-            com.deercom.testo11.login.LoginUserPassScreen(
-                onLoginOk = { nav.navigate(NewRoutes.Home.route) { popUpTo(0) } }
-            )
-        }
-        composable(NewRoutes.Home.route) {
-            com.deercom.testo11.ui.screens.home.HomeWithBottomBarScreen(
-                onEditUser = { /* future */ }
-            )
-        }
-    }
+    NavHost(navController = nav, startDestination = NewRoutes.StartRouter.route) {
+        composable(NewRoutes.StartRouter.route) {
+            val repo: LocalUserRepository = hiltViewModel<UsersViewModel>().repo
+            LaunchedEffect(Unit) {
+                val setupDone = repo.isSetupDone().first()
+                val hasUsers = repo.hasAnyUser().first()
+                if (setupDone && hasUsers) {
+                    nav.navigate(NewRoutes.Login.route) { popUpTo(0) }
+                } else {
+                    nav.navigate(NewRoutes.Onboarding.route) { popUpTo(0) }
+                }
+            }
+        }
+        composable(NewRoutes.Onboarding.route) {
+            val vm: OnboardingViewModel = hiltViewModel()
+            OnboardingScreen(
+                vm = vm,
+                onGotoSummary = { nav.navigate(NewRoutes.Summary.route) }
+            )
+        }
+        composable(NewRoutes.Summary.route) {
+            val vm: OnboardingViewModel = hiltViewModel()
+            SummaryScreen(
+                vm = vm,
+                onEditSection = { section ->
+                    vm.goToSection(section)
+                    nav.popBackStack()
+                },
+                onConfirm = {
+                    nav.navigate(NewRoutes.Login.route) { popUpTo(0) }
+                }
+            )
+        }
+        composable(NewRoutes.Login.route) {
+            LoginUserPassScreen(
+                onLoginOk = { nav.navigate(NewRoutes.Home.route) { popUpTo(0) } }
+            )
+        }
+        composable(NewRoutes.Home.route) {
+            HomeWithBottomBarScreen(
+                onEditUser = { /* future */ }
+            )
+        }
+    }
 }
*** End Patch
*** Begin Patch
*** Update File: app/src/main/java/com/deercom/testo11/data/LocalUserRepository.kt
@@
 package com.deercom.testo11.data
 
 import android.content.Context
 import androidx.datastore.preferences.core.Preferences
 import androidx.datastore.preferences.core.edit
+import androidx.datastore.preferences.core.booleanPreferencesKey
 import androidx.datastore.preferences.core.stringPreferencesKey
 import androidx.datastore.preferences.preferencesDataStore
 import dagger.hilt.android.qualifiers.ApplicationContext
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.map
@@
 private val Context.userPrefs by preferencesDataStore("users_prefs")
 
 class LocalUserRepository @Inject constructor(
     @ApplicationContext private val context: Context
 ) {
     private object K {
         val USERS: Preferences.Key<String> = stringPreferencesKey("users_json")
+        val SETUP_DONE: Preferences.Key<Boolean> = booleanPreferencesKey("setup_done")
     }
@@
     suspend fun addUser(u: User) {
         val current = users()
         val updated = current + u
         context.userPrefs.edit { it[K.USERS] = toJson(updated) }
     }
+
+    fun hasAnyUser(): Flow<Boolean> = context.userPrefs.data.map { prefs ->
+        val json = prefs[K.USERS]
+        !json.isNullOrEmpty() && fromJson(json).isNotEmpty()
+    }
+
+    fun isSetupDone(): Flow<Boolean> =
+        context.userPrefs.data.map { prefs -> prefs[K.SETUP_DONE] ?: false }
+
+    suspend fun setSetupDone(value: Boolean) {
+        context.userPrefs.edit { it[K.SETUP_DONE] = value }
+    }
 }
*** End Patch
*** Begin Patch
*** Update File: app/src/main/java/com/deercom/testo11/onboarding/OnboardingViewModel.kt
@@
 package com.deercom.testo11.onboarding
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import com.deercom.testo11.data.LocalUserRepository
 import com.deercom.testo11.data.User
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.launch
 import javax.inject.Inject
 
 @HiltViewModel
 class OnboardingViewModel @Inject constructor(
     private val repo: LocalUserRepository
 ) : ViewModel() {
-    // empresa
+    // empresa
     var companyName: String = ""
     var companyId: String = ""
 
     // perfil
     var firstName: String = ""
     var lastName: String = ""
     var phone: String = ""
 
     // seguridad
     var username: String = ""
     var password: String = ""
 
     // foto (uri texto por simplicidad)
     var photoUri: String? = null
 
-    fun savePartial() { /* ya no se usa en v2.1 */ }
+    enum class Section { EMPRESA, PERFIL, SEGURIDAD, FOTO }
+    var current: Section = Section.EMPRESA
+        private set
+
+    fun next() {
+        current = when (current) {
+            Section.EMPRESA -> Section.PERFIL
+            Section.PERFIL -> Section.SEGURIDAD
+            Section.SEGURIDAD -> Section.FOTO
+            Section.FOTO -> Section.FOTO
+        }
+    }
+
+    fun back() {
+        current = when (current) {
+            Section.EMPRESA -> Section.EMPRESA
+            Section.PERFIL -> Section.EMPRESA
+            Section.SEGURIDAD -> Section.PERFIL
+            Section.FOTO -> Section.SEGURIDAD
+        }
+    }
+
+    fun goToSection(s: Section) { current = s }
 
-    fun saveFinal(onDone: () -> Unit) {
+    fun saveAll(onDone: () -> Unit) {
         viewModelScope.launch {
             // crea usuario admin master mÃ­nimo con username/password y nombre
             val user = User(
                 id = username.ifBlank { "admin" },
                 displayName = listOf(firstName, lastName).joinToString(" ").trim().ifBlank { "Admin" },
                 phone = phone.ifBlank { null },
                 role = "Admin Master"
             )
             repo.addUser(user)
+            repo.setSetupDone(true)
             onDone()
         }
     }
 }
*** End Patch
*** Begin Patch
*** Update File: app/src/main/java/com/deercom/testo11/ui/screens/onboarding/OnboardingScreen.kt
@@
-package com.deercom.testo11.ui.screens.onboarding
+package com.deercom.testo11.ui.screens.onboarding
 
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.ArrowBack
-import androidx.compose.material3.Button
+import androidx.compose.material3.Button
 import androidx.compose.material3.Card
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.unit.dp
 import com.deercom.testo11.ui.screens.components.AppScaffold
 import com.deercom.testo11.ui.screens.components.AppTopBar
+import androidx.compose.ui.text.input.KeyboardOptions
+import androidx.compose.ui.text.input.KeyboardType
+import androidx.compose.ui.text.input.ImeAction
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.setValue
+import androidx.activity.compose.rememberLauncherForActivityResult
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.compose.foundation.Image
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.LocalContext
+import coil.compose.rememberAsyncImagePainter
+import com.deercom.testo11.onboarding.OnboardingViewModel
 
-@Composable
-fun OnboardingScreen(onFinished: () -> Unit) {
+@Composable
+fun OnboardingScreen(
+    vm: OnboardingViewModel,
+    onGotoSummary: () -> Unit
+) {
     AppScaffold(topBar = {
         AppTopBar(
             title = "Alta inicial",
             navigationIcon = Icons.Filled.ArrowBack,
             onNavigate = { /* back se maneja desde NavGraph */ },
             actions = { com.deercom.testo11.ui.screens.components.TopBarOverflow() }
         )
     }) { pad ->
-        Column(
+        Column(
             modifier = Modifier
                 .fillMaxSize()
                 .padding(pad)
                 .padding(16.dp),
             verticalArrangement = Arrangement.spacedBy(16.dp)
         ) {
-            Card(modifier = Modifier.fillMaxWidth()) {
-                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
-                    Text("Empresa", style = MaterialTheme.typography.titleMedium)
-                    val company = remember { mutableStateOf("") }
-                    val ruc = remember { mutableStateOf("") }
-                    OutlinedTextField(value = company.value, onValueChange = { company.value = it }, label = { Text("Nombre de empresa") })
-                    OutlinedTextField(value = ruc.value, onValueChange = { ruc.value = it }, label = { Text("RUC/ID") }, keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number))
-                }
-            }
-            Card(modifier = Modifier.fillMaxWidth()) {
-                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
-                    Text("Perfil", style = MaterialTheme.typography.titleMedium)
-                    val first = remember { mutableStateOf("") }
-                    val last = remember { mutableStateOf("") }
-                    val phone = remember { mutableStateOf("") }
-                    OutlinedTextField(value = first.value, onValueChange = { first.value = it }, label = { Text("Nombres") }, keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next))
-                    OutlinedTextField(value = last.value, onValueChange = { last.value = it }, label = { Text("Apellidos") })
-                    OutlinedTextField(value = phone.value, onValueChange = { phone.value = it }, label = { Text("TelÃ©fono") }, keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone))
-                }
-            }
-            Card(modifier = Modifier.fillMaxWidth()) {
-                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
-                    Text("Seguridad", style = MaterialTheme.typography.titleMedium)
-                    val user = remember { mutableStateOf("") }
-                    val pass = remember { mutableStateOf("") }
-                    OutlinedTextField(value = user.value, onValueChange = { user.value = it }, label = { Text("Usuario/Alias") }, keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next))
-                    OutlinedTextField(value = pass.value, onValueChange = { pass.value = it }, label = { Text("ContraseÃ±a") })
-                }
-            }
-            Row(horizontalArrangement = Arrangement.spacedBy(12.dp), verticalAlignment = Alignment.CenterVertically) {
-                Button(onClick = onFinished) { Text("Guardar y finalizar") }
-            }
+            when (vm.current) {
+                com.deercom.testo11.onboarding.OnboardingViewModel.Section.EMPRESA -> EmpresaStep(vm)
+                com.deercom.testo11.onboarding.OnboardingViewModel.Section.PERFIL -> PerfilStep(vm)
+                com.deercom.testo11.onboarding.OnboardingViewModel.Section.SEGURIDAD -> SeguridadStep(vm)
+                com.deercom.testo11.onboarding.OnboardingViewModel.Section.FOTO -> FotoStep(vm)
+            }
+            Row(horizontalArrangement = Arrangement.spacedBy(12.dp), verticalAlignment = Alignment.CenterVertically) {
+                Button(onClick = { vm.back() }) { Text("AtrÃ¡s") }
+                Spacer(Modifier.weight(1f))
+                if (vm.current == com.deercom.testo11.onboarding.OnboardingViewModel.Section.FOTO) {
+                    Button(onClick = onGotoSummary) { Text("Continuar a resumen") }
+                } else {
+                    Button(onClick = { vm.next() }) { Text("Siguiente") }
+                }
+            }
         }
     }
 }
 
+@Composable
+private fun EmpresaStep(vm: OnboardingViewModel) {
+    Card(modifier = Modifier.fillMaxWidth()) {
+        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
+            Text("Empresa", style = MaterialTheme.typography.titleMedium)
+            OutlinedTextField(
+                value = vm.companyName, onValueChange = { vm.companyName = it },
+                label = { Text("Nombre de empresa") })
+            OutlinedTextField(
+                value = vm.companyId, onValueChange = { vm.companyId = it },
+                label = { Text("RUC/ID") },
+                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
+            )
+        }
+    }
+}
+
+@Composable
+private fun PerfilStep(vm: OnboardingViewModel) {
+    Card(modifier = Modifier.fillMaxWidth()) {
+        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
+            Text("Perfil", style = MaterialTheme.typography.titleMedium)
+            OutlinedTextField(
+                value = vm.firstName, onValueChange = { vm.firstName = it },
+                label = { Text("Nombres") }, keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
+            )
+            OutlinedTextField(
+                value = vm.lastName, onValueChange = { vm.lastName = it },
+                label = { Text("Apellidos") })
+            OutlinedTextField(
+                value = vm.phone, onValueChange = { vm.phone = it },
+                label = { Text("TelÃ©fono") }, keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone)
+            )
+        }
+    }
+}
+
+@Composable
+private fun SeguridadStep(vm: OnboardingViewModel) {
+    Card(modifier = Modifier.fillMaxWidth()) {
+        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
+            Text("Seguridad", style = MaterialTheme.typography.titleMedium)
+            OutlinedTextField(
+                value = vm.username, onValueChange = { vm.username = it },
+                label = { Text("Usuario/Alias") }, keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
+            )
+            OutlinedTextField(
+                value = vm.password, onValueChange = { vm.password = it },
+                label = { Text("ContraseÃ±a") }
+            )
+        }
+    }
+}
+
+@Composable
+private fun FotoStep(vm: OnboardingViewModel) {
+    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->
+        vm.photoUri = uri?.toString()
+    }
+    Card(modifier = Modifier.fillMaxWidth()) {
<<<<<<< HEAD
+        Column(Modifier.padding(16	dp), verticalArrangement = Arrangement.spacedBy(12	dp)) {
=======
+        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
>>>>>>> b9fde5c (wip: cambios locales antes de rebase)
+            Text("Foto", style = MaterialTheme.typography.titleMedium)
+            Button(onClick = { launcher.launch("image/*") }) { Text("Seleccionar foto") }
+            vm.photoUri?.let { src ->
+                Image(
+                    painter = rememberAsyncImagePainter(model = src),
+                    contentDescription = "preview",
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .height(180.dp),
+                    contentScale = ContentScale.Crop
+                )
+            }
+        }
+    }
+}
*** End Patch
*** Begin Patch
*** Add File: app/src/main/java/com/deercom/testo11/ui/screens/onboarding/SummaryScreen.kt
+package com.deercom.testo11.ui.screens.onboarding
+
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.Button
+import androidx.compose.material3.Card
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.unit.dp
+import coil.compose.rememberAsyncImagePainter
+import com.deercom.testo11.onboarding.OnboardingViewModel
+import com.deercom.testo11.ui.screens.components.AppScaffold
+import com.deercom.testo11.ui.screens.components.AppTopBar
+
+@Composable
+fun SummaryScreen(
+    vm: OnboardingViewModel,
+    onEditSection: (OnboardingViewModel.Section) -> Unit,
+    onConfirm: () -> Unit
+) {
+    AppScaffold(topBar = {
+        AppTopBar(title = "Resumen", actions = { com.deercom.testo11.ui.screens.components.TopBarOverflow() })
+    }) { pad ->
+        Column(
+            modifier = Modifier
+                .fillMaxSize()
+                .padding(pad)
+                .padding(16.dp),
+            verticalArrangement = Arrangement.spacedBy(16.dp)
+        ) {
+            Card(Modifier.fillMaxWidth()) {
+                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
+                    Text("Empresa", style = MaterialTheme.typography.titleMedium)
+                    Text("Nombre: ${vm.companyName}")
+                    Text("RUC/ID: ${vm.companyId}")
+                    Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                        Button(onClick = { onEditSection(OnboardingViewModel.Section.EMPRESA) }) { Text("Editar") }
+                    }
+                }
+            }
+            Card(Modifier.fillMaxWidth()) {
+                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
+                    Text("Perfil", style = MaterialTheme.typography.titleMedium)
+                    Text("Nombre: ${vm.firstName} ${vm.lastName}")
+                    Text("TelÃ©fono: ${vm.phone}")
+                    Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                        Button(onClick = { onEditSection(OnboardingViewModel.Section.PERFIL) }) { Text("Editar") }
+                    }
+                }
+            }
+            Card(Modifier.fillMaxWidth()) {
+                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
+                    Text("Seguridad", style = MaterialTheme.typography.titleMedium)
+                    Text("Usuario: ${vm.username}")
+                    Row(horizontalArrangement = Arrangement.spacedBy(8	dp)) {
+                        Button(onClick = { onEditSection(OnboardingViewModel.Section.SEGURIDAD) }) { Text("Editar") }
+                    }
+                }
+            }
+            Card(Modifier.fillMaxWidth()) {
<<<<<<< HEAD
+                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8	dp)) {
=======
+                Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
>>>>>>> b9fde5c (wip: cambios locales antes de rebase)
+                    Text("Foto", style = MaterialTheme.typography.titleMedium)
+                    vm.photoUri?.let { src ->
+                        Image(
+                            painter = rememberAsyncImagePainter(model = src),
+                            contentDescription = "preview",
+                            modifier = Modifier
+                                .fillMaxWidth()
<<<<<<< HEAD
+                                .height(180	dp),
=======
+                                .height(180.dp),
>>>>>>> b9fde5c (wip: cambios locales antes de rebase)
+                            contentScale = ContentScale.Crop
+                        )
+                    }
+                    Row(horizontalArrangement = Arrangement.spacedBy(8	dp)) {
+                        Button(onClick = { onEditSection(OnboardingViewModel.Section.FOTO) }) { Text("Editar") }
+                    }
+                }
+            }
+            Spacer(Modifier.height(8.dp))
+            Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.spacedBy(12	dp)) {
+                Button(onClick = { vm.saveAll(onConfirm) }) { Text("Confirmar y guardar") }
+            }
+        }
+    }
+}
+
*** End Patch
